# -*- coding: utf-8 -*-
"""FIXX GBT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HdSsUsQBeTZFUKW83bqQPHvi5BfOtLKI
"""

# 1. Import Library
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/dataset_omzet.csv", sep=';')

df

# 3. Cek Missing Value & Konversi Tipe Data
df['omzet'] = pd.to_numeric(df['omzet'], errors='coerce')
df = df.dropna(subset=['omzet'])

# 4. Log-transform omzet
df['log_omzet'] = np.log1p(df['omzet'])

# 5. Encoding Kategorikal
from sklearn.preprocessing import LabelEncoder
label_cols = ['lokasi_omzet_penjualan', 'jenis_komoditi', 'satuan']
le_dict = {}
for col in label_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    le_dict[col] = le

# 6. Pisahkan X dan y
X = df.drop(columns=['omzet', 'periode_data', 'log_omzet'])
y = df['log_omzet']

# 7. Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 8. Inisialisasi Gradient Boosting dengan Hyperparameter
model = GradientBoostingRegressor(
    n_estimators=500,         # jumlah pohon
    learning_rate=0.05,       # kecepatan belajar
    max_depth=5,              # kedalaman pohon
    subsample=0.8,            # data sampling tiap pohon
    random_state=42
)

# 9. Training Model
model.fit(X_train, y_train)

# 10. Prediksi Data Uji
y_pred = model.predict(X_test)

# 11. Evaluasi Model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Gradient Boosting (Log omzet) MSE: {mse:.4f}")
print(f"Gradient Boosting (Log omzet) RÂ² Score: {r2:.4f}")

# 12. Visualisasi Hasil Prediksi
plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Log Omzet Aktual")
plt.ylabel("Log Omzet Prediksi")
plt.title("Perbandingan Log Omzet Aktual vs Prediksi Gradient Boosting")
plt.grid(True)
plt.show()

# 13. Distribusi Error
errors = y_test - y_pred
plt.figure(figsize=(10,6))
sns.histplot(errors, kde=True, color='orange')
plt.title("Distribusi Error CatBoost (Log Omzet)")
plt.xlabel("Error")
plt.grid(True)
plt.show()

# 14. Prediksi Omzet Bulan ke-7 (pakai data dummy)
data_dummy = df[df['bulan'] == 6].copy()  # ambil data bulan ke-6 sebagai dasar
data_dummy['bulan'] = 7  # ganti ke bulan ke-7

# Optional: isi ulang volume rata-rata per jenis komoditi
data_dummy['volume'] = df.groupby('jenis_komoditi')['volume'].transform('mean')

# Drop kolom omzet dan periode_data
data_dummy = data_dummy.drop(columns=['omzet', 'periode_data', 'log_omzet'])

# Prediksi log omzet bulan ke-7
prediksi_log_bulan_7 = model.predict(data_dummy)

# Konversi balik ke omzet asli
prediksi_omzet_bulan_7 = np.expm1(prediksi_log_bulan_7)  # np.expm1 karena tadi log1p

# Masukkan ke kolom hasil prediksi
data_dummy['prediksi_omzet'] = prediksi_omzet_bulan_7

# 15. Decode hasil ke nama asli
for col in label_cols:
    le = le_dict[col]
    data_dummy[col] = le.inverse_transform(data_dummy[col])

# 16. Visualisasi 10 Komoditi Teratas Prediksi Omzet Bulan ke-7
top10 = data_dummy.sort_values('prediksi_omzet', ascending=False).head(10)

plt.figure(figsize=(12,6))
sns.barplot(x='prediksi_omzet', y='jenis_komoditi', data=top10, palette='viridis')
plt.title("Prediksi Omzet 10 Komoditi Tertinggi Bulan ke-7 (GBT Log Omzet)")
plt.xlabel("Prediksi Omzet (dalam ratusan juta rupiah)")
plt.ylabel("Jenis Komoditi")
plt.show()